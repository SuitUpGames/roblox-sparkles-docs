"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9371],{91065:e=>{e.exports=JSON.parse('{"functions":[{"name":"GetPlayerdata","desc":"Returns a promise that resolves with a table of the player\'s data, and rejects if it cannot be retrieved for some reason\\nIf the playerdata is not loaded already, :_createPlayerdataProfile(Player: Player) will be called server-side first","params":[{"name":"Player","desc":"","lua_type":"Player"}],"returns":[{"desc":"A promise that resolves with a table of the player\'s data if the playerdata exists, and rejects if the playerdata does not exist","lua_type":"Promise<T>"}],"function_type":"method","realm":["Client"],"source":{"line":89,"path":"src/Server/Services/Data/PlayerdataService/init.lua"}},{"name":"_createPlayerdataProfile","desc":"Creates a new playerdata template via profileservice/replicaservice for a player","params":[{"name":"Player","desc":"","lua_type":"Player"}],"returns":[{"desc":"A promise that resolves w/a copy of the player\'s data table if loaded successfully, and rejects if unable to load the player\'s data","lua_type":"Promise<T>"}],"function_type":"method","realm":["Server"],"private":true,"source":{"line":101,"path":"src/Server/Services/Data/PlayerdataService/init.lua"}},{"name":"GetPlayerdata","desc":"Returns a promise that resolves with a table of the player\'s data, and rejects if it cannot be retrieved for some reason\\nIf the playerdata is not loaded already, :_createPlayerdataProfile(Player: Player) will be called first","params":[{"name":"Player","desc":"","lua_type":"Player"}],"returns":[{"desc":"A promise that resolves with a table of the player\'s data if the playerdata exists, and rejects if the playerdata does not exist","lua_type":"Promise<T>"}],"function_type":"method","realm":["Server"],"source":{"line":180,"path":"src/Server/Services/Data/PlayerdataService/init.lua"}},{"name":"KnitInit","desc":"Initialize PlayerdataService","params":[],"returns":[{"desc":"","lua_type":"nil"}],"function_type":"method","realm":["Server"],"source":{"line":211,"path":"src/Server/Services/Data/PlayerdataService/init.lua"}},{"name":"KnitStart","desc":"Start PlayerdataService","params":[],"returns":[{"desc":"","lua_type":"nil"}],"function_type":"method","realm":["Server"],"source":{"line":221,"path":"src/Server/Services/Data/PlayerdataService/init.lua"}}],"properties":[{"name":"STORE_NAME","desc":"The datastore to use with profileservice for storing playerdata","lua_type":"string","source":{"line":48,"path":"src/Server/Services/Data/PlayerdataService/init.lua"}},{"name":"DATA_PREFIX","desc":"The prefix to amend to the key used for saving playerdata (Eg. \\"Playerdata_123\\")","lua_type":"string","source":{"line":55,"path":"src/Server/Services/Data/PlayerdataService/init.lua"}},{"name":"DATA_LOAD_RETRIES","desc":"The maximum amount of times to try to load a player\'s data (On joining the game) before rejecting the promise associated w/it","lua_type":"number","source":{"line":62,"path":"src/Server/Services/Data/PlayerdataService/init.lua"}},{"name":"DATA_LOAD_RETRY_DELAY","desc":"How long to wait between failed attempts with loading a player\'s data (On joining the game) before retrying","lua_type":"number","source":{"line":69,"path":"src/Server/Services/Data/PlayerdataService/init.lua"}},{"name":"LOAD_PLAYERDATA_IN_STUDIO","desc":"Boolean that determines whether player save profiles should be loaded while in a Roblox studio session\\nIf true, playerdata will load in studio. If false, playerdata will not be loaded in studio","lua_type":"boolean","source":{"line":77,"path":"src/Server/Services/Data/PlayerdataService/init.lua"}}],"types":[],"name":"PlayerdataService","desc":"Author: serverOptimist & ArtemisTheDeer\\nDate: 11/15/2023\\nProject: Sparkles\\n\\nDescription: Rewrite of serverOptimist PlayerdataService module","source":{"line":12,"path":"src/Server/Services/Data/PlayerdataService/init.lua"}}')}}]);