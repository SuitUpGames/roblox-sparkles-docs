"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9035],{32894:e=>{e.exports=JSON.parse('{"functions":[{"name":"MoveModel","desc":"Client access to MoveModel","params":[{"name":"player","desc":"","lua_type":"Player"},{"name":"args","desc":"","lua_type":"table"}],"returns":[{"desc":"","lua_type":"boolean"}],"function_type":"method","realm":["Client"],"source":{"line":83,"path":"src/Server/Services/Game/PlacementService.lua"}},{"name":"ChangeBuildingDesign","desc":"Client access to ChangeBuildingDesign","params":[{"name":"Player","desc":"The player invoking the remote","lua_type":"Player"},{"name":"newBuildingDesign","desc":"The chosen building design - if nil, building will default to default design for that store plot","lua_type":"string?"}],"returns":[{"desc":"Returns a promise that returns a boolean indicating whether the new building design was set or not","lua_type":"Promise<T>"}],"function_type":"method","realm":["Client"],"source":{"line":95,"path":"src/Server/Services/Game/PlacementService.lua"}},{"name":"ProcessPropInput","desc":"Accepts incoming behavior from prop modules and passes along the args to the relevant prop class (If it exists)","params":[{"name":"Player","desc":"The player firing the remote","lua_type":"Player"},{"name":"floorId","desc":"The ID of the floor the player is trying to edit","lua_type":"string"},{"name":"propId","desc":"The ID of the prop the player is trying to edit","lua_type":"string"},{"name":"propFunction","desc":"The function to fire under the prop","lua_type":"string"},{"name":"...","desc":"Variadic args passed along to the prop\'s _processInput function","lua_type":"any"}],"returns":[{"desc":"Returns the callback from the respective propFunction function under the prop class","lua_type":"any"}],"function_type":"method","source":{"line":192,"path":"src/Server/Services/Game/PlacementService.lua"}},{"name":"UnequipWand","desc":"Client access to UnequipWand","params":[{"name":"player","desc":"","lua_type":"Player"}],"returns":[],"function_type":"method","realm":["Client"],"source":{"line":229,"path":"src/Server/Services/Game/PlacementService.lua"}},{"name":"EquipWand","desc":"Client access to EquipWand","params":[{"name":"player","desc":"","lua_type":"Player"}],"returns":[],"function_type":"method","realm":["Client"],"source":{"line":266,"path":"src/Server/Services/Game/PlacementService.lua"}},{"name":"EnchantProp","desc":"Client access to EnchantProp","params":[{"name":"...","desc":"","lua_type":"any"}],"returns":[{"desc":"","lua_type":"Promise<T>"}],"function_type":"method","realm":["Client"],"source":{"line":336,"path":"src/Server/Services/Game/PlacementService.lua"}},{"name":"StockShelf","desc":"Stocks an item for a shelf (Client-exposed function for [PlacementService.StockShelf])","params":[{"name":"...","desc":"","lua_type":"any"}],"returns":[{"desc":"Returns a promise that resolves with the new stock configuration for the shelf if successfully stocked, and rejects if it cannot be stocked","lua_type":"Promise<T>"}],"function_type":"method","source":{"line":344,"path":"src/Server/Services/Game/PlacementService.lua"}},{"name":"PlaceModel","desc":"Client access to PlaceModel","params":[{"name":"player","desc":"","lua_type":"Player"},{"name":"args","desc":"table of arguments","lua_type":"table"}],"returns":[{"desc":"true if successfully placed, false otherwise","lua_type":"boolean"}],"function_type":"method","source":{"line":373,"path":"src/Server/Services/Game/PlacementService.lua"}},{"name":"RemoveModel","desc":"Client access to RemoveModel","params":[{"name":"Player","desc":"","lua_type":"Player"},{"name":"args","desc":"","lua_type":"table"}],"returns":[],"function_type":"method","source":{"line":428,"path":"src/Server/Services/Game/PlacementService.lua"}}],"properties":[],"types":[],"name":"PlacementService.Client","desc":"","realm":["Client"],"source":{"line":15,"path":"src/Server/Services/Game/PlacementService.lua"}}')}}]);