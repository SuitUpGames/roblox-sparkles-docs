"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8811],{24438:e=>{e.exports=JSON.parse('{"functions":[{"name":"_getCameraSprings","desc":"This function creates springs for manipulating the camera position.","params":[],"returns":[{"desc":"The camera springs table (Base: Spring, Target: Spring, _reachPoint: Signal)","lua_type":"table"}],"function_type":"method","realm":["Client"],"private":true,"source":{"line":95,"path":"src/Client/Controllers/Player/CameraController.lua"}},{"name":"TrackObject","desc":"This function tracks the camera to be at least (X) away studs from a part, with an optional rotationOffset (CFrame) defined that rotates the cframe relative to the tracked part\\n\\n\\nThe camera is positioned always at least (followDistance) studs away from the targetPart, and at a height of (followHeight) studs above the targetPart.\\n\\n\\nThe function will continue to track the part until targetPart is destroyed or the function/another camera tracking function is called again with a new targetPart.","params":[{"name":"targetPart","desc":"The target part to follow","lua_type":"BasePart"},{"name":"followHeight","desc":"The height (Relative to part position Y) to follow the part at","lua_type":"number"},{"name":"followDistance","desc":"How far away distance-wise (X/Z) to follow the part from","lua_type":"number"},{"name":"snapCamera","desc":"If true, the camera will have the target spring position/goal set to the camera\'s cframe","lua_type":"boolean?"},{"name":"yieldUntilReached","desc":"If true, the function will yield until the camera has reached the target position/orientation","lua_type":"boolean?"},{"name":"unlockWhenReachedTarget","desc":"If true, the camera will unlock (Set back to custom camera type/disconnect render step bind) when it reaches the target position/orientation","lua_type":"boolean?"},{"name":"rotationOffset","desc":"Optional rotation offset to apply to the camera CFrame (Relative to the part\'s position)","lua_type":"CFrame?"}],"returns":[],"function_type":"method","source":{"line":129,"path":"src/Client/Controllers/Player/CameraController.lua"}},{"name":"TweenToPosition","desc":"This function tweens the camera (Using springs) to a specific CFrame","params":[{"name":"Target","desc":"The target CFrame to tween the camera to","lua_type":"CFrame"},{"name":"yieldUntilReached","desc":"If true, the function will yield until the camera has reached the target position/orientation","lua_type":"boolean?"}],"returns":[],"function_type":"method","source":{"line":266,"path":"src/Client/Controllers/Player/CameraController.lua"}},{"name":"CircleCenterMap","desc":"This function rotates the camera around CENTER_OF_MAP position by (cameraDistance) studs away from the center, with a (cameraHeight) offset from the CENTER_OF_MAP variable","params":[{"name":"snapCamera","desc":"If true, the camera will snap to the starting CFrame position, otherwise it will tween from the current camera CFrame to the new desired position","lua_type":"boolean?"}],"returns":[],"function_type":"method","source":{"line":317,"path":"src/Client/Controllers/Player/CameraController.lua"}},{"name":"_resetCameraSprings","desc":"Resets base/target camera angular frequency/damping ratio to default values","params":[],"returns":[{"desc":"Returns the cameraSprings table","lua_type":"table"}],"function_type":"method","private":true,"source":{"line":364,"path":"src/Client/Controllers/Player/CameraController.lua"}},{"name":"StopCameraMovement","desc":"This function disables the renderstep connection (If connected) for camera movement","params":[],"returns":[{"desc":"","lua_type":"nil\\r\\n"}],"function_type":"method","source":{"line":384,"path":"src/Client/Controllers/Player/CameraController.lua"}},{"name":"KnitInit","desc":"Initialize CameraController","params":[],"returns":[],"function_type":"method","source":{"line":391,"path":"src/Client/Controllers/Player/CameraController.lua"}},{"name":"KnitStart","desc":"Start CameraController","params":[],"returns":[],"function_type":"method","source":{"line":396,"path":"src/Client/Controllers/Player/CameraController.lua"}}],"properties":[{"name":"CAMERA_FREQUENCY","desc":"The frequency of the camera spring","lua_type":"number","source":{"line":39,"path":"src/Client/Controllers/Player/CameraController.lua"}},{"name":"CAMERA_DAMPING","desc":"The damping of the camera spring","lua_type":"number","source":{"line":46,"path":"src/Client/Controllers/Player/CameraController.lua"}},{"name":"CAMERA_ROTATION_BOBBING_RANGE","desc":"How much the camera should bob up and down when rotating around the center of the map (In studs) - uses sine wave","lua_type":"number","source":{"line":53,"path":"src/Client/Controllers/Player/CameraController.lua"}},{"name":"CAMERA_ROTATION_SPEED","desc":"The speed at which the camera should rotate around the center of the map when camera mode is set to rotate around the center of the map (In degrees per second, converted to radians)","lua_type":"number","source":{"line":60,"path":"src/Client/Controllers/Player/CameraController.lua"}},{"name":"CAMERA_ROTATION_DEPTH","desc":"The depth at which the camera should rotate around the center of the map when camera mode is set to rotate around the center of the map (In studs)","lua_type":"number","source":{"line":67,"path":"src/Client/Controllers/Player/CameraController.lua"}},{"name":"CAMERA_ROTATION_HEIGHT","desc":"The height at which the camera should rotate around the center of the map when camera mode is set to rotate around the center of the map (In studs)","lua_type":"number","source":{"line":74,"path":"src/Client/Controllers/Player/CameraController.lua"}}],"types":[],"name":"CameraController","desc":"Author: Artemis DeBoer\\nDate: 02/27/2024\\nProject: roblox-sparkles\\n\\nDescription: CameraController contains useful functions for manipulating the player\'s camera in-game smoothly and with ease","realm":["Client"],"source":{"line":11,"path":"src/Client/Controllers/Player/CameraController.lua"}}')}}]);