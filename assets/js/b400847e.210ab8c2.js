"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2786],{89568:e=>{e.exports=JSON.parse('{"functions":[{"name":"Destroy","desc":"Destroys the customer","params":[],"returns":[{"desc":"","lua_type":"nil\\r\\n"}],"function_type":"method","private":true,"source":{"line":44,"path":"src/Server/Services/Game/CustomerService/Customer.lua"}},{"name":"AddItemToShoppingList","desc":"Adds an item to the customer that they will want to purchase - the customer will search for the new items on the next lookup cycle","params":[{"name":"itemId","desc":"The ID of the item to add","lua_type":"string"},{"name":"itemQuantity","desc":"(Optional) The amount of the item to add - defaults to 1","lua_type":"number"}],"returns":[{"desc":"Returns a table representing the customer\'s newly updated shopping list","lua_type":"table"}],"function_type":"method","private":true,"source":{"line":57,"path":"src/Server/Services/Game/CustomerService/Customer.lua"}},{"name":"AddRandomItemsToShoppingList","desc":"Adds random item(s) to the customer that they will want to purchase - the customer will search for the new items on the next lookup cycle\\nItem generation logic is as follows:\\n- itemQuantity is split 50/50 at the moment between items that are in-stock and items that are not in-stock, this can be adjusted.\\n- itemQuantity\'s split uses math.ceil - there is a bug (unintended behavior(?)) where it can add an extra item to the cart because of how math.ceil works with itemQuantity being split\\n- Half of itemQuantity will be items that are presently stocked in-stores, with weighted odds for what items will be preferred over others (Using random logic)\\n- Half of itemQuantity will be items that are NOT presently stocked in-stores, but will pick (With weighted odds)\\n- There\'s a chance that with the items that are not stocked presently, one of them will have a \'VIP\' status assigned to them randomly (Based on the [CustomerService.CUSTOMER_VIP_CHANCE] variable) - if the customer is a VIP, they will pay more for a random item under the list of items that are not stocked in-game, but can be purchased","params":[{"name":"itemQuantity","desc":"(Optional) The amount of the item to add - defaults to 1","lua_type":"number"}],"returns":[{"desc":"Returns a key/pair array of the desired items + how many to purchase","lua_type":"table"}],"function_type":"method","private":true,"source":{"line":77,"path":"src/Server/Services/Game/CustomerService/Customer.lua"}},{"name":"PlayAnimation","desc":"Replicates the state of an animation to the client and overrides any existing animations being played in that moment\\nAnimations are reset automatically when a new path is assigned","params":[{"name":"Animation","desc":"The animation to play","lua_type":"string"}],"returns":[{"desc":"Returns whether the animation was started successfully or not","lua_type":"boolean"}],"function_type":"method","source":{"line":227,"path":"src/Server/Services/Game/CustomerService/Customer.lua"}},{"name":"RemoveItemFromShoppingList","desc":"Removes an item from the customer\'s shopping list","params":[{"name":"itemId","desc":"","lua_type":"string"},{"name":"itemQuantity","desc":"(Optional) The amount of the item to remove - defaults to 1. Keys will be removed from table if quantity <= 0","lua_type":"number"}],"returns":[{"desc":"Returns the player\'s current shopping list","lua_type":"table"}],"function_type":"method","private":true,"source":{"line":238,"path":"src/Server/Services/Game/CustomerService/Customer.lua"}},{"name":"AddItemToCart","desc":"Adds an item to a customer\'s cart","params":[{"name":"itemId","desc":"The ID of the item to add","lua_type":"string"},{"name":"itemQuantity","desc":"(Optional) The amount of the item to add - defaults to 1","lua_type":"number?"}],"returns":[{"desc":"Returns the current shopping cart and the new quantity of the item provided","lua_type":"table, number"}],"function_type":"method","private":true,"source":{"line":260,"path":"src/Server/Services/Game/CustomerService/Customer.lua"}},{"name":"RemoveItemFromCart","desc":"Removes an item from a customer\'s cart","params":[{"name":"itemId","desc":"The ID of the item to remove","lua_type":"string"},{"name":"itemQuantity","desc":"The quantity of the item to remove","lua_type":"number"}],"returns":[{"desc":"Returns the current cart and the updated item quantity for that specific item","lua_type":"table, number"}],"function_type":"method","private":true,"source":{"line":274,"path":"src/Server/Services/Game/CustomerService/Customer.lua"}},{"name":"NavigateToPoint","desc":"Navigates a customer to a specific point","params":[{"name":"Position","desc":"The desired position/orientation of the NPC","lua_type":"CFrame"}],"returns":[{"desc":"Returns a promise that resolves if the NPC reaches the desired point, and rejects if it does not","lua_type":"Promise<T>"}],"function_type":"method","private":true,"source":{"line":290,"path":"src/Server/Services/Game/CustomerService/Customer.lua"}},{"name":"GetCurrentNPCPosition","desc":"Gets the approx. server-side position of the NPC (Based on waypoints/elapsed time)","params":[],"returns":[{"desc":"Returns the CFrame of the NPC if it is spawned in, and returns nil if not","lua_type":"CFrame?"}],"function_type":"method","source":{"line":298,"path":"src/Server/Services/Game/CustomerService/Customer.lua"}},{"name":"new","desc":"Generates a new customer class","params":[{"name":"Replication","desc":"An array of players to replicate this customer to - if no table is provided (nil), then the customer will replicate to all clients","lua_type":"table"},{"name":"Origin","desc":"The starting position of the customer NPC","lua_type":"Vector3"},{"name":"rigType","desc":"The type of rig to use for the customer NPC","lua_type":"string"},{"name":"rigClass","desc":"","lua_type":"string"},{"name":"isVip","desc":"Is the NPC a VIP? (If a VIP, a random item under the NPC\'s shopping list will pay a multiplier based on its selling price)","lua_type":"boolean"}],"returns":[{"desc":"Returns a promise that resolves with the new customer table and rejects if it cannot","lua_type":"Promise<T>"}],"function_type":"static","source":{"line":310,"path":"src/Server/Services/Game/CustomerService/Customer.lua"}}],"properties":[],"types":[],"name":"Customer","desc":"Author: ArtemisTheDeer\\nDate: 11/17/2023\\nProject: roblox-sparkles\\n\\nDescription: Customer server class","realm":["Server"],"source":{"line":11,"path":"src/Server/Services/Game/CustomerService/Customer.lua"}}')}}]);