"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[7849],{32137:e=>{e.exports=JSON.parse('{"functions":[],"properties":[],"types":[{"name":"ANY_TABLE","desc":"Generic table type (Wildcard) - accepts any values","lua_type":"{[any]: any}","source":{"line":11,"path":"src/Shared/Modules/Data/Types.lua"}},{"name":"ReplicaPathListener","desc":"","lua_type":"(newValue: any, oldValue: any) -> ()","source":{"line":63,"path":"src/Shared/Modules/Data/Types.lua"}},{"name":"ReplicaListener","desc":"","lua_type":"(replica: Replica) -> ()","source":{"line":68,"path":"src/Shared/Modules/Data/Types.lua"}},{"name":"ReplicaParams","desc":"Replica class parameters","lua_type":"{ClassName: string, Data: { [string]: any }, Tags: { [string]: any }, Replication: (string | { Player })}","source":{"line":75,"path":"src/Shared/Modules/Data/Types.lua"}},{"name":"ReplicaPath","desc":"A path to a key in the player\'s data (Eg. \\"_configuration._build\\")","lua_type":"{ string }","source":{"line":90,"path":"src/Shared/Modules/Data/Types.lua"}},{"name":"Replica","desc":"ClassName: string,\\nData: { any },\\nTags: { any },\\nReplication: { any },\\n\\nSetParent: (self: Replica, replica: Replica) -> (),\\nDestroyFor: (self: Replica, Player) -> (),\\nDestroy: (self: Replica) -> (),\\n\\nSetValue: (self: Replica, path: string, value: any) -> (),\\nSetValues: (self: Replica, path: string, values: { [string]: any }) -> (),\\nArrayInsert: (self: Replica, path: string, value: any) -> (),\\nArraySet: (self: Replica, path: string, index: number, value: any) -> (),\\nArrayRemove: (self: Replica, path: string, index: number) -> (),\\n\\nConnectOnServerEvent: (self: Replica, listener: () -> ()) -> (),\\nConnectOnClientEvent: (self: Replica, listener: () -> ()) -> (),\\n\\nListenToChildAdded: (self: Replica, child: Replica) -> (),\\nListenToRaw: (self: Replica, listener: (listenerType: string, path: { string }, any) -> ()) -> (),\\nListenToChange: (self: Replica, path: string, listener: (newValue: any, oldValue: any) -> ()) -> (),\\nListenToNewKey: (self: Replica, path: string, listener: (value: any, newKey: string) -> ()) -> (),\\nListenToKeyChanged: (self: Replica, path: string, listener: (newValue: any, oldValue: any) -> ()) -> (), \\nListenToArrayInsert: (self: Replica, path: string, listener: (index: number, value: any) -> ()) -> (),\\nListenToArraySet: (self: Replica, path: string, listener: (index: number, value: any) -> ()) -> (),\\nListenToArrayRemove: (self: Replica, path: string, listener: (index: number, value: any) -> ()) -> (),\\n}\\nThe members of the server/client Replica controller/service","lua_type":"{","source":{"line":123,"path":"src/Shared/Modules/Data/Types.lua"}}],"name":"Types","desc":"This module exports a list of types that can be used for typechecking","source":{"line":5,"path":"src/Shared/Modules/Data/Types.lua"}}')}}]);