"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9491],{40107:e=>{e.exports=JSON.parse('{"functions":[{"name":"GetData","desc":"Returns a promise that resolves with the playerdata once successfully loaded for the first time, and rejects if the player\'s data cannot be retrieved for some reason","params":[],"returns":[{"desc":"Returns a promise that resolves with the playerdata/rejects if unable to get playerdata","lua_type":"Promise<T>"}],"function_type":"method","realm":["Client"],"yields":true,"source":{"line":47,"path":"src/Client/Controllers/Player/DataController.lua"}},{"name":"GetKey","desc":"Returns a promise that resolves with a specific value (Looked up by key) from the playerdata, and rejects if the playerdata was unable to be loaded/the key does not exist","params":[{"name":"Key","desc":"The key that you want to lookup in the player data table","lua_type":"string"}],"returns":[{"desc":"Returns a promise that resolves w/the value from the player\'s data, and rejects if the player\'s data could not be loaded in time and/or the key does not exist","lua_type":"Promise<T>"}],"function_type":"method","realm":["Client"],"source":{"line":58,"path":"src/Client/Controllers/Player/DataController.lua"}},{"name":"GetKeyUpdatedSignal","desc":"Returns a signal that fires (With the value) when the Key argument in the playerdata is updated","params":[{"name":"Key","desc":"The key that you want to lookup in the player data table. Can be a specific path if desired (Eg. \\"Currencies\\" to listen to currency changes as a whole or \\"Currencies.Coins\\" to listen to all coin changes)","lua_type":"string"}],"returns":[{"desc":"Returns a promise that resolves w/a signal that fires when the specific key is updated, and rejects if the playerdata isn\'t loaded in-time","lua_type":"Promise<T>"}],"function_type":"method","realm":["Client"],"yields":true,"source":{"line":79,"path":"src/Client/Controllers/Player/DataController.lua"}},{"name":"DisconnectKeyUpdatedSignal","desc":"Removes a data updated connection from the table\\nWarning: Will disconnect all events tied to that key!","params":[{"name":"Key","desc":"The key to disconnect - can be a specific path if desired (Eg. \\"Currencies\\" to disconnect a signal for \\"Currencies\\" or \\"Currencies.Coins\\" to disconnect the \\"Coins\\" signal)","lua_type":"string"}],"returns":[{"desc":"","lua_type":"nil"}],"function_type":"method","realm":["Client"],"source":{"line":110,"path":"src/Client/Controllers/Player/DataController.lua"}},{"name":"KnitInit","desc":"Initialize DataController\\nGet the replica of the playerdata from the server, and then set the cachedPlayerdata varaible as the replica","params":[],"returns":[{"desc":"","lua_type":"nil"}],"function_type":"method","source":{"line":124,"path":"src/Client/Controllers/Player/DataController.lua"}},{"name":"KnitStart","desc":"Start DataController","params":[],"returns":[{"desc":"","lua_type":"nil"}],"function_type":"method","source":{"line":139,"path":"src/Client/Controllers/Player/DataController.lua"}}],"properties":[{"name":"DATA_LOAD_TIMEOUT","desc":"The max amount of time to wait for the playerdata to be cached on the client (From the server) on init before timing out and rejecting any associated promises/fallback behavior","lua_type":"number","source":{"line":37,"path":"src/Client/Controllers/Player/DataController.lua"}}],"types":[],"name":"DataController","desc":"Author: ArtemisTheDeer\\nDate: 11/14/2023\\nProject: Sparkles\\n\\nDescription: Player data Knit controller","realm":["Client"],"source":{"line":11,"path":"src/Client/Controllers/Player/DataController.lua"}}')}}]);